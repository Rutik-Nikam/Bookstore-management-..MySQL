-- QUESTION SET 3  - : ADVANCE LEVEL
 
-- Q 1  .Calculate the total revenue generated by each publisher.

SELECT Publishers.name, SUM(Order_Details.quantity * Order_Details.unit_price) AS total_revenue
FROM Publishers
JOIN Books ON Publishers.publisher_id = Books.publisher_id
JOIN Order_Details ON Books.book_id = Order_Details.book_id
GROUP BY Publishers.name;


-- Q 2 Find the customer who placed the highest number of orders and the total amount spent.

SELECT Customers.name, COUNT(Orders.order_id) AS total_orders, SUM(Orders.total_amount) AS total_spent
FROM Customers
JOIN Orders ON Customers.customer_id = Orders.customer_id
GROUP BY Customers.name
ORDER BY total_orders DESC
LIMIT 1;


-- Q 3 .List all books along with their total sales revenue, sorted by highest revenue.

SELECT Books.title, SUM(Order_Details.quantity * Order_Details.unit_price) AS total_revenue
FROM Books
JOIN Order_Details ON Books.book_id = Order_Details.book_id
GROUP BY Books.title
ORDER BY total_revenue DESC;


-- Q 4 .Find the average order value for each customer.

SELECT Customers.name, AVG(Orders.total_amount) AS average_order_value
FROM Customers
JOIN Orders ON Customers.customer_id = Orders.customer_id
GROUP BY Customers.name;


-- Q 5 .Get the list of books that have been ordered more than 100 times.

SELECT Books.title, SUM(Order_Details.quantity) AS total_ordered
FROM Books
JOIN Order_Details ON Books.book_id = Order_Details.book_id
GROUP BY Books.title
HAVING total_ordered > 100;


-- Q 6 .Identify the authors whose books have generated the highest average sales price per order.

SELECT Authors.name, AVG(Order_Details.unit_price * Order_Details.quantity) AS avg_sales_price
FROM Authors
JOIN Books ON Authors.author_id = Books.author_id
JOIN Order_Details ON Books.book_id = Order_Details.book_id
GROUP BY Authors.name
ORDER BY avg_sales_price DESC
LIMIT 3;


-- Q 7 .Calculate the percentage of total sales contributed by each book genre.

WITH GenreSales AS (
SELECT Books.genre, SUM(Order_Details.quantity * Order_Details.unit_price) AS genre_sales
FROM Books
JOIN Order_Details ON Books.book_id = Order_Details.book_id
GROUP BY Books.genre),
TotalSales AS (SELECT SUM(genre_sales) AS total_sales FROM GenreSales)
SELECT GenreSales.genre, (GenreSales.genre_sales / TotalSales.total_sales) * 100 AS genre_percentage
FROM GenreSales, TotalSales;


-- Q 8 Retrieve the yearly sales total for each author

SELECT Authors.name, YEAR(Orders.order_date) AS sales_year, SUM(Order_Details.quantity * Order_Details.unit_price) AS yearly_sales
FROM Authors
JOIN Books ON Authors.author_id = Books.author_id
JOIN Order_Details ON Books.book_id = Order_Details.book_id
JOIN Orders ON Order_Details.order_id = Orders.order_id
GROUP BY Authors.name, sales_year
ORDER BY sales_year, yearly_sales DESC;


-- Q 9 .Find the customer with the highest average order value over multiple orders.

SELECT Customers.name, AVG(Orders.total_amount) AS average_order_value
FROM Customers
JOIN Orders ON Customers.customer_id = Orders.customer_id
GROUP BY Customers.name
ORDER BY average_order_value DESC
LIMIT 1;


-- Q 10 Calculate the total revenue generated by books published after the year 2000.

SELECT SUM(Order_Details.quantity * Order_Details.unit_price) AS total_revenue
FROM Books
JOIN Order_Details ON Books.book_id = Order_Details.book_id
WHERE Books.published_date > '2000-01-01';